#[================================================================================================[
Copyright (c) 2024 by null. All rights reserved.

This software is copyright protected and proprietary to null.
null grants to you only those rights as set out in the license conditions.
All other rights remain with null.

File description:
-----------------
This is a CMake list file for building the resulting target for the Executable WarningDisplayExecutable.

#]================================================================================================]

# Set the EXECUTABLE_NAME variable to the shortname used for the Executable in the ARXML model
set(EXECUTABLE_NAME WarningDisplayExecutable)

# Find the packages needed for the build of the Executable
find_package(Threads)

# Import MICROSAR Adaptive CMake Packages
set(AMSR_COMPONENTS 
        amsr::applicationbase
        amsr::ipcbinding
        amsr::log_ara_logging
        amsr::socal
        amsr::someipbinding
        amsr::com_r20_11
)

find_package(AMSR REQUIRED COMPONENTS ${AMSR_COMPONENTS})

# Define a local variable for the reference to the Model Generation Result location
set(EXEC_GENROOT "${MODEL_GENERATION_RESULT_DIR}/${EXECUTABLE_NAME}")

add_executable(${EXECUTABLE_NAME})

target_sources(${EXECUTABLE_NAME} PRIVATE
        main.cpp
        rport_speedlimit_service_client.cpp
        rport_speedlimit_service_client.h
        warningdisplay_controller.cpp
        warningdisplay_controller.h
        warningdisplay_processor.cpp
        warningdisplay_processor.h
        ../common/executable_controller_base.cpp
)

# Include the cmake files generated by the model generators. These files will define
# which source files that will be compiled and added to this target.
# The variable [target] must be set because it is used by the included cmake files from the
# src gen.
set(target ${EXECUTABLE_NAME})
file(GLOB LIST_OF_SRC_GEN_CMAKE_FILES "${EXEC_GENROOT}/*.cmake")

foreach(CMAKEFILE_TO_INCLUDE IN LISTS LIST_OF_SRC_GEN_CMAKE_FILES)
    include(${CMAKEFILE_TO_INCLUDE})
endforeach()

target_include_directories(${EXECUTABLE_NAME} PRIVATE
        ../../include
)

target_link_libraries(${EXECUTABLE_NAME} PRIVATE ${AMSR_COMPONENTS})


#Installation of Executable binariy and related configuration files
install(TARGETS ${EXECUTABLE_NAME} DESTINATION "opt/${EXECUTABLE_NAME}/bin")

#find all the generated .json and .json.validation files and add them to the install list
get_target_property(MY_PROJECT_SOURCES ${EXECUTABLE_NAME} SOURCES)

foreach(SOURCE_FILE IN LISTS MY_PROJECT_SOURCES)
    get_filename_component(EXTENSION ${SOURCE_FILE} EXT)
    if(${EXTENSION} STREQUAL ".json" OR ${EXTENSION} STREQUAL ".json.validation")
        install(FILES ${SOURCE_FILE} DESTINATION opt/${EXECUTABLE_NAME}/etc)
    endif()
endforeach()

