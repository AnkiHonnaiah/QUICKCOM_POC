/**********************************************************************************************************************
 *  COPYRIGHT
 *  -------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) 2024 by Vector Informatik GmbH. All rights reserved.
 *
 *                This software is copyright protected and proprietary to Vector Informatik GmbH.
 *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
 *                All other rights remain with Vector Informatik GmbH.
 *  \endverbatim
 *  -------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -----------------------------------------------------------------------------------------------------------------*/
/*!        \file
 *        \brief  Interface to initialize the binding.
 *
 *********************************************************************************************************************/
#ifndef LIB_IPC_BINDING_INCLUDE_IPC_BINDING_INTERNAL_TARGET_DEPENDENT_INITIALIZER_INTERFACE_H_
#define LIB_IPC_BINDING_INCLUDE_IPC_BINDING_INTERNAL_TARGET_DEPENDENT_INITIALIZER_INTERFACE_H_

/**********************************************************************************************************************
 *  INCLUDES
 *********************************************************************************************************************/
#include <memory>

#include "osabstraction/io/reactor1/reactor1_interface.h"

#include "ipc_binding/internal/config_validator_interface.h"
#include "ipc_binding_core/internal/aracom_ipc_binding_interface.h"
#include "ipc_binding_core/internal/remote_server_manager_interface.h"
#include "ipc_binding_core/internal/runtime_configuration/runtime_config.h"
#include "ipc_binding_core/internal/service_discovery/required_service_instance_listener_manager_interface.h"
#include "ipc_binding_core/internal/service_discovery/service_instance_listener_interface.h"
#include "ipc_binding_xf_common/internal/trace/trace_sink_factory_interface.h"

namespace amsr {
namespace ipc_binding {
namespace internal {
namespace target_dependent {

/*!
 * \brief Interface to initialize the binding.
 *
 * \steady FALSE
 *
 * \unit IpcBinding::Initializer
 */
class InitializerInterface {
 public:
  /*!
   * \brief Define binding core interface type.
   */
  using BindingCoreType = ::amsr::ipc_binding_core::internal::AraComIpcBindingInterface;

  /*!
   * \brief Type alias for the ServiceListener.
   */
  using ServiceInstanceListenerPtr =
      amsr::UniquePtr<::amsr::ipc_binding_core::internal::service_discovery::ServiceInstanceListenerInterface>;

  /*!
   * \brief Type alias for the runtime configuration model.
   */
  using RuntimeConfig = ::amsr::ipc_binding_core::internal::runtime_configuration::RuntimeConfig;

  /*!
   * \brief Type alias for the config validator.
   */
  using ConfigValidatorInterfacePtr = amsr::UniquePtr<::amsr::ipc_binding::internal::ConfigValidatorInterface>;

  /*!
   * \brief Type alias for the RemoteServerManagerInterface.
   */
  using RemoteServerManagerInterface = ::amsr::ipc_binding_core::internal::RemoteServerManagerInterface;

  /*!
   * \brief Type alias for the RequiredServiceInstanceManager.
   */
  using RequiredServiceInstanceManagerInterface =
      ::amsr::ipc_binding_core::internal::service_discovery::RequiredServiceInstanceListenerManagerInterface;

  /*!
   * \brief Type alias for the TraceSinkFactoryInterface.
   */
  using TraceSinkFactoryInterface = ::amsr::ipc_binding_xf_common::internal::trace::TraceSinkFactoryInterface;

  /*!
   * \brief Type-alias for ReactorInterface.
   */
  using ReactorInterface = osabstraction::io::reactor1::Reactor1Interface;

  InitializerInterface(InitializerInterface&&) noexcept = delete;
  InitializerInterface(InitializerInterface const&) noexcept = delete;
  auto operator=(InitializerInterface const&) & -> InitializerInterface& = delete;
  auto operator=(InitializerInterface&&) & -> InitializerInterface& = delete;

  /*!
   * \brief Destroys the object.
   *
   * \pre         -
   * \context     Shutdown
   * \threadsafe  FALSE
   * \reentrant   FALSE
   * \synchronous TRUE
   * \steady      FALSE
   */
  virtual ~InitializerInterface() noexcept = default;

  /*!
   * \brief   Validates if the runtime deployment configuration matches the generated design code.
   * \details Asserts that every deployed service config was generated by the design.
   *
   * \param[in] validator       The validator for the runtime configuration and deployed service interfaces.
   * \param[in] runtime_config  Used IPC binding runtime configuration.
   *
   * \pre
   * \context     Init
   * \threadsafe  FALSE
   * \reentrant   FALSE
   * \synchronous TRUE
   * \steady      FALSE
   */
  virtual auto ValidateRuntimeConfig(ConfigValidatorInterfacePtr validator,
                                     RuntimeConfig const& runtime_config) const noexcept -> void = 0;

  // VECTOR NC AutosarC++17_10-M7.1.2: MD_IPCBINDING_AutosarC++17_10-M7.1.2_config_variant
  /*!
   * \brief Initialize the TransformationLayer.
   *
   * \param[in,out] reactor                            Reference to the reactor.
   * \param[in]     runtime_config                     Used IPC binding runtime configuration.
   * \param[in]     trace_sink_factory                 Reference to the trace sink factory.
   * \param[in,out] binding_core                       Reference to BindingCore instance.
   * \param[in,out] required_service_instance_manager  Reference to the RequiredServiceInstanceManager.
   * \param[in,out] remote_server_manager              Reference to the RemoteServerManager.
   *
   * \pre         This function must only be called once.
   * \context     Init
   * \threadsafe  FALSE
   * \reentrant   FALSE
   * \synchronous TRUE
   * \steady      FALSE
   */
  virtual auto Initialize(ReactorInterface& reactor, RuntimeConfig const& runtime_config,
                          TraceSinkFactoryInterface const& trace_sink_factory, BindingCoreType& binding_core,
                          RequiredServiceInstanceManagerInterface& required_service_instance_manager,
                          RemoteServerManagerInterface& remote_server_manager) const noexcept -> void = 0;

 protected:
  /*!
   * \brief Use default constructor.
   *
   * \pre         -
   * \context     Init
   * \threadsafe  FALSE
   * \reentrant   FALSE
   * \synchronous TRUE
   * \steady      FALSE
   */
  InitializerInterface() noexcept = default;
};

}  // namespace target_dependent
}  // namespace internal
}  // namespace ipc_binding
}  // namespace amsr

#endif  // LIB_IPC_BINDING_INCLUDE_IPC_BINDING_INTERNAL_TARGET_DEPENDENT_INITIALIZER_INTERFACE_H_
