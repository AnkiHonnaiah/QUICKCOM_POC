/**********************************************************************************************************************
 *  COPYRIGHT
 *  -------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) 2024 by Vector Informatik GmbH. All rights reserved.
 *
 *                This software is copyright protected and proprietary to Vector Informatik GmbH.
 *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
 *                All other rights remain with Vector Informatik GmbH.
 *  \endverbatim
 *  -------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -----------------------------------------------------------------------------------------------------------------*/
/*!        \file
 *        \brief  Trace meta data.
 *      \details
 *********************************************************************************************************************/

#ifndef LIB_COM_TRACE_INCLUDE_AMSR_COMTRACE_META_DATA_H_
#define LIB_COM_TRACE_INCLUDE_AMSR_COMTRACE_META_DATA_H_

/**********************************************************************************************************************
 *  INCLUDES
 *********************************************************************************************************************/
#include <cstdint>

namespace amsr {
namespace comtrace {

using ServiceId = std::uint32_t;       /*!< Type alias for the Service ID. */
using MajorVersion = std::uint32_t;    /*!< Type alias for the Major Version. */
using MinorVersion = std::uint32_t;    /*!< Type alias for the Minor Version. */
using InstanceId = std::uint32_t;      /*!< Type alias for the Instance ID. */
using ProxyInstanceId = std::uint32_t; /*!< Type alias for the Proxy Instance ID. */

using EventId = std::uint32_t;         /*!< Type alias for the Event ID. */
using MethodId = std::uint32_t;        /*!< Type alias for the Method ID. */
using SequenceCounter = std::uint32_t; /*!< Type alias for the Sequence Counter. */

// VECTOR NC AutosarC++17_10-M9.6.1, VectorC++-V9.6.0: MD_ComTrace_M9.6.1_OperationStatus_NotDependantOnPosition
/*!
 * \brief Ara::com internal trace operation status flags.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct OperationStatus {
  /*!
   * \brief Flag indicating that any previous trace operation got dropped and was not notified to the tracer.
   */
  bool TracePointsDropped : 1;  // NOLINT(readability-identifier-naming)
};

/*!
 * \brief MetaData identifying an ara::com service instance.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct InstanceMetaData {
  ServiceId service_id;       /*!< Service ID. Identical to the ARXML deployment config. */
  MajorVersion major_version; /*!< Major Version. Identical to the ARXML deployment config. */
  MinorVersion minor_version; /*!< Minor Version. Identical to the ARXML deployment config. */
  InstanceId instance_id;     /*!< Instance ID. Identical to the ARXML deployment config. */
};

/*!
 * \brief MetaData identifying an ara::com proxy service instance.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct ProxyInstanceMetaData {
  ServiceId service_id;              /*!< Service ID. Identical to the ARXML deployment config. */
  MajorVersion major_version;        /*!< Major Version. Identical to the ARXML deployment config. */
  MinorVersion minor_version;        /*!< Minor Version. Identical to the ARXML deployment config. */
  InstanceId instance_id;            /*!< Instance ID. Identical to the ARXML deployment config. */
  ProxyInstanceId proxy_instance_id; /*!< Proxy Instance ID. Generated by ara::com on proxy-construction. */
};

/*!
 * \brief MetaData identifying a concrete event type and sample.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct EventMetaData final {
  /*!
   * \brief   Event ID.
   * \details Identical to the ARXML deployment config.
   */
  EventId event_id;

  /*!
   * \brief   Continuous sequence counter incremented with every transmitted event samples.
   * \details Only unique for a dedicated Event ID.
   */
  SequenceCounter sequence_counter;

  /*!
   * \brief Trace operation status.
   */
  OperationStatus operation_status;
};

/*!
 * \brief MetaData identifying a concrete service method.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct MethodMetaData final {
  /*!
   * \brief   Method ID.
   * \details Identical to the ARXML deployment config.
   */
  MethodId method_id;

  /*!
   * \brief   Continuous sequence counter incremented with every transmitted event samples.
   * \details Only unique for a dedicated Event ID.
   */
  SequenceCounter sequence_counter;

  /*!
   * \brief Ara::com internal operation status.
   */
  OperationStatus operation_status;
};

// ---- Trace-Point specific meta-data container ----

// -- Events --

/*!
 * \brief MetaData for event sample transmitted with [Skeleton]->[Event]->Send(SampleType const&).
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct EventSendMetaData {
  InstanceMetaData instance; /*!< MetaData of the ara::com service instance. */
  EventMetaData event;       /*!< Event-specific MetaData. */
};

/*!
 * \brief MetaData for event sample transmitted with [Skeleton]->[Event]->Send(SampleAllocateePtr<SampleType>).
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using EventSendAllocateMetaData = EventSendMetaData;

/*!
 * \brief MetaData for a processed event sample received with the [Proxy]->[Event]->GetNewSamples() API.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct EventReadSampleMetaData {
  ProxyInstanceMetaData instance; /*!< MetaData of the ara::com proxy service instance. */
  EventMetaData event;            /*!< Event-specific MetaData. */
};

// -- Methods --

/*!
 * \brief MetaData for a method request transmitted with [Proxy]->[Method](Args...).
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct MethodRequestSendMetaData {
  ProxyInstanceMetaData instance; /*!< MetaData of the ara::com service instance. */
  MethodMetaData method;          /*!< Method-specific MetaData. */
};

/*!
 * \brief MetaData for a received method request on skeleton-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct MethodRequestReceivedMetaData {
  InstanceMetaData instance; /*!< MetaData of the ara::com service instance. */
  MethodMetaData method;     /*!< Method-specific MetaData. */
};

/*!
 * \brief MetaData for a method response transmitted on skeleton-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using MethodResponseSendMetaData = MethodRequestReceivedMetaData;

/*!
 * \brief MetaData for a method response received on proxy-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
struct MethodResponseReceivedMetaData {
  ProxyInstanceMetaData instance; /*!< MetaData of the ara::com proxy service instance. */
  MethodMetaData method;          /*!< Method-specific MetaData. */
};

// -- Fields --

/*!
 * \brief MetaData for field update transmitted with [Skeleton]->[Field]->Update(FieldType const&).
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldUpdateMetaData = EventSendMetaData;

/*!
 * \brief MetaData for a processed field sample received with the [Proxy]->[Field]->GetNewSamples() API.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldReadSampleMetaData = EventReadSampleMetaData;

/*!
 * \brief MetaData for a field getter request transmitted with [Proxy]->[Field]->Get().
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldGetRequestSendMetaData = MethodRequestSendMetaData;

/*!
 * \brief MetaData for a field getter request received on skeleton-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldGetRequestReceivedMetaData = MethodRequestReceivedMetaData;

/*!
 * \brief MetaData for a field getter response transmitted on skeleton-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldGetResponseSendMetaData = MethodResponseSendMetaData;

/*!
 * \brief MetaData for a field getter response received on proxy-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldGetResponseReceivedMetaData = MethodResponseReceivedMetaData;

/*!
 * \brief MetaData for a field getter request transmitted with [Proxy]->[Field]->Get().
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldSetRequestSendMetaData = MethodRequestSendMetaData;

/*!
 * \brief MetaData for a field getter request received on skeleton-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldSetRequestReceivedMetaData = MethodRequestReceivedMetaData;

/*!
 * \brief MetaData for a field getter response transmitted on skeleton-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldSetResponseSendMetaData = MethodResponseSendMetaData;

/*!
 * \brief MetaData for a field getter response received on proxy-side.
 *
 * \vpublic
 *
 * \unit ComTrace::TraceData
 */
using FieldSetResponseReceivedMetaData = MethodResponseReceivedMetaData;

}  // namespace comtrace
}  // namespace amsr

#endif  // LIB_COM_TRACE_INCLUDE_AMSR_COMTRACE_META_DATA_H_
