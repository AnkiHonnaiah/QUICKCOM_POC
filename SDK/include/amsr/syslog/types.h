/**********************************************************************************************************************
 *  COPYRIGHT
 *  -------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) 2024 by Vector Informatik GmbH. All rights reserved.
 *
 *                This software is copyright protected and proprietary to Vector Informatik GmbH.
 *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
 *                All other rights remain with Vector Informatik GmbH.
 *  \endverbatim
 *  -------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -----------------------------------------------------------------------------------------------------------------*/
/*!        \file  libosabstraction-posix/include/amsr/syslog/types.h
 *        \brief  System Logger setting types.
 *        \unit   osabstraction::syslog
 *
 *********************************************************************************************************************/
#ifndef LIB_SYSLOG_LIBOSABSTRACTION_POSIX_INCLUDE_AMSR_SYSLOG_TYPES_H_
#define LIB_SYSLOG_LIBOSABSTRACTION_POSIX_INCLUDE_AMSR_SYSLOG_TYPES_H_

/**********************************************************************************************************************
 *  INCLUDES
 *********************************************************************************************************************/
#include <syslog.h>
#include <utility>

#include "amsr/core/string.h"

namespace amsr {
namespace syslog {

/*!
 * \brief           System logger facility type
 * \vprivate        Vector product internal API
 */
enum class Facility : std::uint8_t {
  /*!
   * \brief           Message generated by a process.
   */
  kUser = LOG_USER
};

/*!
 * \brief           System logger log priority
 * \vprivate        Vector product internal API
 */
enum class LogPriority : std::uint8_t {
  /*!
   * \brief           A panic condition was reported to all processes.
   */
  kEmergency = LOG_EMERG,
  /*!
   * \brief           A condition that should be corrected immediately.
   */
  kAlert = LOG_ALERT,
  /*!
   * \brief           Critical condition.
   */
  kCritical = LOG_CRIT,
  /*!
   * \brief           Error message.
   */
  kError = LOG_ERR,
  /*!
   * \brief           Warning message.
   */
  kWarning = LOG_WARNING,
  /*!
   * \brief           A condition requiring special handling.
   */
  kNotice = LOG_NOTICE,
  /*!
   * \brief           General information message.
   */
  kInfo = LOG_INFO,
  /*!
   * \brief           A message useful for debugging programs.
   */
  kDebug = LOG_DEBUG
};

/*!
 * \brief           Settings to configure the system logger.
 * \vprivate        Vector product internal API
 */
class SyslogSettings {
 public:
  /*!
   * \brief           Constructor
   *
   * \param[in]       name            ID string that is prepended to every message (typically set to the application
   *                                  name).
   * \param[in]       facility_value  What type of program is logging the message.
   *
   * \context         ANY
   *
   * \pre             -
   *
   * \reentrant       FALSE
   * \synchronous     TRUE
   * \threadsafe      FALSE
   * \steady          TRUE
   *
   * \vprivate        Product private
   */
  explicit SyslogSettings(::amsr::core::String name, Facility facility_value) noexcept
      : identifier_{std::move(name)}, facility_{facility_value} {}

  /*!
   * \brief           Sets option bit to include PID in each logged message.
   *
   * \context         ANY
   *
   * \pre             -
   *
   * \reentrant       FALSE
   * \synchronous     TRUE
   * \threadsafe      FALSE
   * \steady          TRUE
   *
   * \vprivate        Product private
   */
  void SetPidLogging() noexcept { options_ |= static_cast<uint16_t>(LOG_PID); }

  /*!
   * \brief           Sets option bit to open the connection immediately (normally, the connection is opened when the
   * first message is logged).
   *
   * \context         ANY
   *
   * \pre             -
   *
   * \reentrant       FALSE
   * \synchronous     TRUE
   * \threadsafe      FALSE
   * \steady          TRUE
   *
   * \vprivate        Product private
   */
  void SetOpenLogDirectly() noexcept { options_ |= static_cast<uint16_t>(LOG_NDELAY); }

  // VECTOR Next Construct AutosarC++17_10-A3.9.1: MD_OSA_M9.3.3_TypeQualifierIgnored
  /*!
   * \brief           Returns identifier string.
   * \return          Identifier string.
   *
   * \context         ANY
   *
   * \pre             -
   *
   * \reentrant       FALSE
   * \synchronous     TRUE
   * \threadsafe      FALSE
   * \steady          TRUE
   *
   * \vprivate        Component internal
   */
  ::amsr::core::String const& GetIdentifier() const noexcept { return identifier_; }

  // VECTOR Next Construct AutosarC++17_10-A3.9.1: MD_OSA_M9.3.3_TypeQualifierIgnored
  /*!
   * \brief           Returns facility value.
   * \return          Facility value.
   *
   * \context         ANY
   *
   * \pre             -
   *
   * \reentrant       FALSE
   * \synchronous     TRUE
   * \threadsafe      FALSE
   * \steady          TRUE
   *
   * \vprivate        Component internal
   */
  Facility GetFacility() const noexcept { return facility_; }

  // VECTOR Next Construct AutosarC++17_10-A3.9.1: MD_OSA_M9.3.3_TypeQualifierIgnored
  /*!
   * \brief           Returns option value.
   * \return          Option value.
   *
   * \context         ANY
   *
   * \pre             -
   *
   * \reentrant       FALSE
   * \synchronous     TRUE
   * \threadsafe      FALSE
   * \steady          TRUE
   *
   * \vprivate        Component internal
   */
  uint16_t GetOption() const noexcept { return options_; }

 private:
  /*!
   * \brief           ID string that is prepended to every message.
   */
  ::amsr::core::String identifier_;

  /*!
   * \brief            Option flags which control the operation of openlog() and subsequent calls to syslog().
   */
  uint16_t options_{0};

  /*!
   * \brief           What type of program is logging the message.
   */
  Facility facility_;
};
}  // namespace syslog
}  // namespace amsr

#endif  // LIB_SYSLOG_LIBOSABSTRACTION_POSIX_INCLUDE_AMSR_SYSLOG_TYPES_H_
