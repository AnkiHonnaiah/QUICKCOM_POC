import com.vector.cfg.model.mdf.MIObject
import com.vector.cfg.model.mdf.ar4x.commonstructure.implementationdatatypes.MIImplementationDataType

import static com.vector.cfg.automation.api.ScriptApi.*

//daVinci enables the IDE code completion support
daVinci {

    scriptDescription "This template script describes how to read and write model data via mdfModel"

     /*
     * Task: ReadWriteModelTask
     * Type: DV_PROJECT
     * -------------------------------------------------------------------------------------------------------
     * This task shows how to read and write via the mdf model.
     * For more details please refer to section "Model" in the Automation Documentation.
     * -------------------------------------------------------------------------------------------------------
     */
	scriptTask("ReadWriteModelTask", DV_PROJECT){

        taskDescription 'Reads and Writes the name of a ImplementationDataType existing in the accessible model.'

        taskHelp '''This task reads and writes the name of an existing ImplementationDataType.'''

        code {
            // Define which ImplementationDataType to access using its short name path.
            def modelElementToSearchFor = '/AUTOSAR_Platform/ImplementationDataTypes/boolean'

            // Get a reference to the element which shall be changed
            List<MIObject> listOfFoundObjects = mdfModel(modelElementToSearchFor)
            if (listOfFoundObjects.size() == 1) {
                MIObject foundObject = listOfFoundObjects[0]
                MIImplementationDataType implementationDataType = foundObject as MIImplementationDataType
                scriptLogger.info "Read - Datatype element:  ${implementationDataType.name}"

                // Model changes must always be executed within a transaction block
                transaction {
                    // Write
                    implementationDataType.name= 'MyOwnBoolean'
                    scriptLogger.info "Write - Datatype element: ${implementationDataType.name}"
                }

                // In case the project shall be saved, uncomment the line below.
                // saveProject()
            } else {
                scriptLogger.error "Couldn't find the element asked for or too many. Requested element short name path: ${modelElementToSearchFor}"
            }

        }
    }
}
